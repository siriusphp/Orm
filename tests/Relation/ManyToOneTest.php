<?php
declare(strict_types=1);

namespace Sirius\Orm\Tests\Relation;

use Sirius\Orm\Entity\GenericEntity;
use Sirius\Orm\Entity\Tracker;
use Sirius\Orm\Mapper;
use Sirius\Orm\Query;
use Sirius\Orm\Relation\ManyToOne;
use Sirius\Orm\Relation\RelationOption;
use Sirius\Orm\Tests\BaseTestCase;

class ManyToOneTest extends BaseTestCase
{

    /**
     * @var Mapper
     */
    protected $nativeMapper;
    /**
     * @var Mapper
     */
    protected $foreignMapper;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->orm->register('images', $this->getMapperConfig('images'));

        $this->nativeMapper = Mapper::make($this->orm, $this->getMapperConfig('products'));
        $this->orm->register('products', $this->nativeMapper);

        $this->foreignMapper = Mapper::make($this->orm, $this->getMapperConfig('categories'));
        $this->orm->register('categories', $this->foreignMapper);
    }

    public function test_basic_query()
    {
        $relation = new ManyToOne('category', $this->nativeMapper, $this->foreignMapper);

        $tracker = new Tracker($this->nativeMapper, [
            ['category_id' => 10],
            ['category_id' => 11],
        ]);
        $query   = $relation->getQuery($tracker);

        $expectedSql = <<<SQL
SELECT
    *
FROM
    categories
WHERE
    id IN (:__1__, :__2__)
SQL;

        $this->assertSameStatement($expectedSql, $query->getStatement());
        $this->assertSame([
            '__1__' => [10, \PDO::PARAM_INT],
            '__2__' => [11, \PDO::PARAM_INT]
        ], $query->getBindValues());
    }

    public function test_callback()
    {
        $relation = new ManyToOne('category', $this->nativeMapper, $this->foreignMapper, [
            RelationOption::QUERY_CALLBACK => function (Query $query) {
                return $query->where('status', 'active');
            }
        ]);

        $tracker = new Tracker($this->nativeMapper, [
            ['category_id' => 10],
            ['category_id' => 11],
        ]);
        $query   = $relation->getQuery($tracker);

        $expectedSql = <<<SQL
SELECT
    *
FROM
    categories
WHERE
    id IN (:__1__, :__2__) AND status = :__3__
SQL;

        $this->assertSameStatement($expectedSql, $query->getStatement());
        $this->assertSame([
            '__1__' => [10, \PDO::PARAM_INT],
            '__2__' => [11, \PDO::PARAM_INT],
            '__3__' => ['active', \PDO::PARAM_STR],
        ], $query->getBindValues());
    }

    public function test_guards()
    {
        $relation = new ManyToOne('category', $this->nativeMapper, $this->foreignMapper, [
            RelationOption::FOREIGN_GUARDS => ['status' => 'active', 'deleted_at IS NULL']
        ]);

        $tracker = new Tracker($this->nativeMapper, [
            ['category_id' => 10],
            ['category_id' => 11],
        ]);
        $query   = $relation->getQuery($tracker);

        $expectedSql = <<<SQL
SELECT
    *
FROM
    categories
WHERE
    (id IN (:__1__, :__2__)) AND status = :__3__ AND deleted_at IS NULL
SQL;

        $this->assertSameStatement($expectedSql, $query->getStatement());
        $this->assertSame([
            '__1__' => [10, \PDO::PARAM_INT],
            '__2__' => [11, \PDO::PARAM_INT],
            '__3__' => ['active', \PDO::PARAM_STR],
        ], $query->getBindValues());
    }

    public function test_entities_belong_together()
    {
        $relation = new ManyToOne('category', $this->nativeMapper, $this->foreignMapper, [
            RelationOption::NATIVE_KEY => 'cat_id'
        ]);

        $product   = new GenericEntity(['id' => 10, 'cat_id' => 20]);
        $category  = new GenericEntity(['id' => 20, 'name' => 'Category 1']);
        $category2 = new GenericEntity(['id' => 30, 'name' => 'Category 1']);

        $this->assertTrue($relation->entitiesBelongTogether($product, $category));
        $this->assertFalse($relation->entitiesBelongTogether($product, $category2));
    }

    public function test_attaching_query_result_to_entity()
    {
        $relation = new ManyToOne('category', $this->nativeMapper, $this->foreignMapper);

        $product  = new GenericEntity(['id' => 10, 'category_id' => 20]);
        $category = new GenericEntity(['id' => 20, 'name' => 'Category 1']);

        $relation->attachesMatchesToEntity($product, [$category]);
        $this->assertSame($product->get('category'), $category);

        $category = new GenericEntity(['id' => 10, 'name' => 'Category 1']);
        $relation->attachesMatchesToEntity($product, [$category]);
        $this->assertNull($product->get('category'));
    }

    public function test_eager_load()
    {
        $this->insertRow('categories', ['id' => 10, 'name' => 'Category']);
        $this->insertRow('products', ['category_id' => 10, 'sku' => 'abc', 'price' => 10.5]);
        $this->insertRow('products', ['category_id' => 10, 'sku' => 'xyz', 'price' => 20.5]);

        $products = $this->nativeMapper
            ->newQuery()
            ->load('category')
            ->get();

        $category1 = $products[0]->get('category');
        $category2 = $products[1]->get('category');
        $this->assertNotNull($category1);
        $this->assertEquals(10, $category1->getPk());
        $this->assertNotNull($category2);
        $this->assertSame($category1, $category2); // to ensure only one query was executed
    }

    public function test_lazy_load()
    {
        $this->insertRow('categories', ['id' => 10, 'name' => 'Category']);
        $this->insertRow('products', ['category_id' => 10, 'sku' => 'abc', 'price' => 10.5]);
        $this->insertRow('products', ['category_id' => 10, 'sku' => 'xyz', 'price' => 20.5]);

        $products = $this->nativeMapper
            ->newQuery()
            ->get();

        $category1 = $products[0]->get('category');
        $category2 = $products[1]->get('category');
        $this->assertNotNull($category1);
        $this->assertEquals(10, $category1->getPk());
        $this->assertNotNull($category2);
        $this->assertSame($category1, $category2); // to ensure only one query was executed
    }
}